name: CD/@configu/stores

on:
  workflow_dispatch:
  push:
    tags:
      - 'stores/*/v*'

jobs:
  pre-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/deploy-start-action
        with:
          slack-webhook: ${{ secrets.SLACK_WEBHOOK_URL }}

  release:
    runs-on: ${{ matrix.runner }}
    needs: pre-release
    strategy:
      matrix:
        # todo: create a dedicated runner to execute the corresponding Node.js distribution
        # https://nodejs.org/download/release/latest/
        dist:
          - linux-arm64
          - linux-armv7l
          - linux-ppc64le
          - linux-s390x
          - linux-x64
          - darwin-arm64
          - darwin-x64
          # - win-arm64
          - win-x64
        include:
          - dist: linux-arm64
            runner: ubuntu-latest
            arch: arm64
          - dist: linux-armv7l
            runner: ubuntu-latest
            arch: armv7l
          - dist: linux-ppc64le
            runner: ubuntu-latest
            arch: ppc64le
          - dist: linux-s390x
            runner: ubuntu-latest
            arch: s390x
          - dist: linux-x64
            runner: ubuntu-latest
            arch: x64
          - dist: darwin-arm64
            runner: macos-latest
            arch: arm64
          - dist: darwin-x64
            runner: macos-latest
            arch: x64
          # - dist: win-arm64
          #   runner: windows-latest
          #   arch: arm64
          - dist: win-x64
            runner: windows-latest
            arch: x64
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/get-release-action
        id: release

      - uses: ./.github/actions/ts-env-action
        with:
          architecture: ${{ matrix.arch }}

      - name: Get package name
        id: package
        shell: bash
        run: |
          package=$(echo "${{ steps.release.outputs.package }}" | awk -F '/' '{print $2}')
          package_name=@configu/$package

          echo "package: $package"
          echo "package_name: $package_name"

          echo "package=$package" >> $GITHUB_OUTPUT
          echo "package_name=$package_name" >> $GITHUB_OUTPUT

      - name: Bump package version
        shell: bash
        run: |
          pnpm --filter ${{ steps.package.outputs.package_name }} exec \
            npm --no-git-tag-version version ${{ steps.release.outputs.version }}

      - name: Build package code
        id: build
        shell: bash
        run: |
          pnpm --filter ${{ steps.package.outputs.package_name }} run \
            build

      - name: Process package distribution
        shell: bash
        run: |
          dist_path=${{ steps.release.outputs.package_path }}/dist
          dist_from=$dist_path/index.cjs
          dist_to=$dist_path/${{ steps.package.outputs.package }}-${{ matrix.dist }}.js
          pnpx shx mv $dist_from $dist_to

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.package }}-${{ matrix.dist }}-${{ steps.release.outputs.version }}
          path: ${{ steps.release.outputs.package_path }}/dist/*

      - name: Release package to version-based release
        uses: softprops/action-gh-release@v2
        if: ${{startsWith(github.ref, 'refs/tags/') }}
        with:
          files: |
            ${{ steps.release.outputs.package_path }}/dist/*

      - name: Release package to channel-based release
        uses: softprops/action-gh-release@v2
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        with:
          tag_name: ${{ steps.release.outputs.package }}/${{ steps.release.outputs.channel }}
          # target_commitish: ${{ github.sha }}
          make_latest: ${{ steps.release.outputs.channel == 'latest' }}
          prerelease: ${{ steps.release.outputs.channel != 'latest' }}
          files: |
            ${{ steps.release.outputs.package_path }}/dist/*

  post-release:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/deploy-end-action
        if: always()
        with:
          slack-webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
