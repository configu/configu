name: CD/@configu/cli

on:
  push:
    tags:
      - 'cli/v*'

jobs:
  pre-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/deploy-start-action
        with:
          slack-webhook: ${{ secrets.SLACK_WEBHOOK_URL }}

  release-executable:
    runs-on: ${{ matrix.runner }}
    needs: pre-release
    strategy:
      matrix:
        # todo: create a dedicated runner to execute the corresponding Node.js distribution
        # https://nodejs.org/download/release/latest/
        dist:
          # aarch64 = arm64
          # armv7 = armv7l
          - linux-arm64
          - linux-armv7l
          - linux-ppc64le
          - linux-s390x
          - linux-x64
          - darwin-arm64
          - darwin-x64
          - win-arm64
          - win-x64
        include:
          - dist: linux-arm64
            runner: ubuntu-latest
            arch: arm64
          - dist: linux-armv7l
            runner: ubuntu-latest
            arch: armv7l
          - dist: linux-ppc64le
            runner: ubuntu-latest
            arch: ppc64le
          - dist: linux-s390x
            runner: ubuntu-latest
            arch: s390x
          - dist: linux-x64
            runner: ubuntu-latest
            arch: x64
          - dist: darwin-arm64
            runner: macos-latest
            arch: arm64
          - dist: darwin-x64
            runner: macos-latest
            arch: x64
          - dist: win-arm64
            runner: windows-latest
            arch: arm64
          - dist: win-x64
            runner: windows-latest
            arch: x64
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/get-release-action
        id: release

      - uses: ./.github/actions/ts-env-action
        id: env
        with:
          architecture: ${{ matrix.arch }}

      - name: Bump package version
        shell: bash
        run: |
          pnpm --filter ${{ steps.release.outputs.package_name }} exec \
            npm --no-git-tag-version version ${{ steps.release.outputs.version }}

      - name: Build package code
        id: build
        shell: bash
        run: |
          pnpm --filter ${{ steps.release.outputs.package_name }} run \
            build

      - name: Compile package code
        shell: bash
        env:
          NODE_ARCH: ${{ matrix.arch }}
        run: |
          pnpm --filter ${{ steps.release.outputs.package_name }} run \
            compile

      # - name: Compile package code
      #   id: compile
      #   uses: bryopsida/node-sea-action@v1
      #   with:
      #     working-dir: ${{ steps.release.outputs.package_path }}
      #     output-dir: ${{ steps.release.outputs.package_path }}/dist
      #     executable-name: configu
      #     sea-config-path: sea-config.json
      #     node-path: ${{ steps.node.outputs.node_path }}

      - name: Process package distribution
        shell: bash
        run: |
          dist_path=${{ steps.release.outputs.package_path }}/dist
          # ls -la $dist_path
          pnpx shx mv $dist_path/run.cjs $dist_path/${{ matrix.dist }}.js
          if [[ ${{ matrix.runner }} == windows* ]]; then
            # $dist_path/configu.exe -v
            pnpx shx mv $dist_path/configu.exe $dist_path/configu-${{ matrix.dist }}.exe
          else
            # $dist_path/configu -v
            pnpx shx mv $dist_path/configu $dist_path/configu-${{ matrix.dist }}
          fi
          # ls -la $dist_path

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.release.outputs.package }}-${{ matrix.dist }}-${{ steps.release.outputs.version }}
          path: ${{ steps.release.outputs.package_path }}/dist/*

      - name: Release package to version-based release
        uses: softprops/action-gh-release@v2
        if: ${{startsWith(github.ref, 'refs/tags/') }}
        with:
          files: |
            ${{ steps.release.outputs.package_path }}/dist/*

      - name: Release package to channel-based release
        uses: softprops/action-gh-release@v2
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        with:
          tag_name: ${{ steps.release.outputs.package }}/${{ steps.release.outputs.channel }}
          # target_commitish: ${{ github.sha }}
          make_latest: ${{ steps.release.outputs.channel == 'latest' }}
          prerelease: ${{ steps.release.outputs.channel != 'latest' }}
          files: |
            ${{ steps.release.outputs.package_path }}/dist/*

      # - name: Check release
      #   if: ${{ matrix.runner != 'windows-latest' }}
      #   shell: bash
      #   env:
      #     CONFIGU_DIR: .
      #     CONFIGU_VERSION: ${{ steps.release.outputs.version }}
      #   run: |
      #     curl -fsSL https://raw.githubusercontent.com/configu/configu/refs/heads/${{ steps.release.outputs.branch }}/${{ steps.release.outputs.package_path }}/install.sh | sh
      #     .configu/bin/configu -v

      # - name: Check release
      #   if: ${{ matrix.runner == 'windows-latest' }}
      #   shell: pwsh
      #   env:
      #     CONFIGU_DIR: .
      #     CONFIGU_VERSION: ${{ steps.release.outputs.version }}
      #   run: |
      #     irm https://raw.githubusercontent.com/configu/configu/refs/heads/${{ steps.release.outputs.branch }}/${{ steps.release.outputs.package_path }}/install.ps1 | iex
      #     .configu/bin/configu -v

  release-docker:
    runs-on: ubuntu-latest
    needs: release-executable
    env:
      DOCKER_IMAGE_NAME: 'configu/cli'
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/get-release-action
        id: release

      - name: Set Node.js information
        id: node
        shell: bash
        run: |
          node_version=$(cat .node-version)
          echo "node_version: $node_version"
          echo "node_version=$node_version" >> $GITHUB_OUTPUT

      # https://github.com/docker/build-push-action/tree/v6/?tab=readme-ov-file#examples
      # https://docs.docker.com/build/ci/github-actions/multi-platform/
      - uses: crazy-max/ghaction-setup-docker@v3
        with:
          daemon-config: |
            {
              "debug": true,
              "features": {
                "containerd-snapshotter": true
              }
            }

      - uses: docker/setup-qemu-action@v3

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Release package to Docker Hub
        uses: docker/build-push-action@v6
        with:
          context: ${{ steps.release.outputs.package_path }}
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.release.outputs.version }}
            ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.release.outputs.channel }}
          build-args: |
            NODE_VERSION=${{ steps.node.outputs.node_version }}
            CONFIGU_VERSION=${{ steps.release.outputs.version }}
          push: true

  post-release:
    runs-on: ubuntu-latest
    needs: release-docker
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/deploy-end-action
        if: always()
        with:
          slack-webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
