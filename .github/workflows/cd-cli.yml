name: CD/@configu/cli

on:
  push:
    tags:
      - 'cli/v*'

jobs:
  pre-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/deploy-start-action
        with:
          slack-webhook: ${{ secrets.SLACK_WEBHOOK_URL }}

  build-binary:
    runs-on: ${{ matrix.runner }}
    needs: pre-release
    strategy:
      matrix:
        # todo: create a dedicated runner to execute the corresponding Node.js distribution
        # https://nodejs.org/download/release/latest/
        dist:
          - linux-arm64 # aarch64
          - linux-armv7l # armv7
          - linux-ppc64le
          - linux-s390x
          - linux-x64
          - linux-x64-musl
          - darwin-arm64
          - darwin-x64
          - win-arm64
          - win-x64
        include:
          - dist: linux-arm64
            runner: ubuntu-latest
            arch: arm64
          - dist: linux-armv7l
            runner: ubuntu-latest
            arch: armv7l
          - dist: linux-ppc64le
            runner: ubuntu-latest
            arch: ppc64le
          - dist: linux-s390x
            runner: ubuntu-latest
            arch: s390x
          - dist: linux-x64
            runner: ubuntu-latest
            arch: x64
          - dist: linux-x64-musl
            runner: ubuntu-latest
            arch: x64
          - dist: darwin-arm64
            runner: macos-latest
            arch: arm64
          - dist: darwin-x64
            runner: macos-latest
            arch: x64
          - dist: win-arm64
            runner: windows-latest
            arch: arm64
          - dist: win-x64
            runner: windows-latest
            arch: x64
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/get-release-action
        id: release

      - uses: ./.github/actions/ts-env-action
        id: env
        with:
          architecture: ${{ matrix.arch }}

      - name: Bump package version
        shell: bash
        run: |
          pnpm --filter ${{ steps.release.outputs.package_name }} exec \
            npm --no-git-tag-version version ${{ steps.release.outputs.version }}

      - name: Build package code
        shell: bash
        env:
          NODE_VERSION: ${{ steps.env.outputs.node_version }}
          NODE_DIST: ${{ matrix.dist }}
        run: |
          pnpm --filter ${{ steps.release.outputs.package_name }} run \
            build:binary
          ls -l ${{ steps.release.outputs.package_path }}/dist

      - uses: actions/upload-artifact@v4
        with:
          name: configu-v${{ steps.release.outputs.version }}-${{ matrix.dist }}
          path: ${{ steps.release.outputs.package_path }}/dist/configu-v${{ steps.release.outputs.version }}-${{ matrix.dist }}.*

  release-docker:
    runs-on: ubuntu-latest
    needs: build-binary
    env:
      DOCKER_IMAGE_NAME: 'configu/cli'
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/get-release-action
        id: release

      - name: Set Node.js information
        id: node
        shell: bash
        run: |
          node_version=$(cat .node-version)
          echo "node_version: $node_version"
          echo "node_version=$node_version" >> $GITHUB_OUTPUT

      # https://github.com/docker/build-push-action/tree/v6/?tab=readme-ov-file#examples
      # https://docs.docker.com/build/ci/github-actions/multi-platform/
      - uses: crazy-max/ghaction-setup-docker@v3
        with:
          daemon-config: |
            {
              "debug": true,
              "features": {
                "containerd-snapshotter": true
              }
            }

      - uses: docker/setup-qemu-action@v3

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Release package to Docker Hub
        uses: docker/build-push-action@v6
        with:
          file: ${{ steps.release.outputs.package_path }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.release.outputs.version }}
            ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.release.outputs.channel }}
          build-args: |
            NODE_VERSION=${{ steps.node.outputs.node_version }}
            CONFIGU_VERSION=${{ steps.release.outputs.version }}
          push: true
          provenance: true
          sbom: true

      - name: Update Docker Hub Description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ env.DOCKER_IMAGE_NAME }}
          short-description: 'Containerized Configu CLI'
          readme-filepath: ${{ steps.release.outputs.package_path }}/README.md
          enable-url-completion: true

  release-binary:
    runs-on: ubuntu-latest
    needs: build-binary
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/get-release-action
        id: release

      - uses: actions/download-artifact@v4
        with:
          path: ${{ steps.release.outputs.package_path }}/dist
          pattern: configu-v${{ steps.release.outputs.version }}-*
          merge-multiple: true

      - name: Release package to version-based release
        uses: softprops/action-gh-release@v2
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        with:
          files: |
            ${{ steps.release.outputs.package_path }}/dist/*

      # - name: Delete previous tag and release
      #   run: |
      #     gh release delete ${{ steps.release.outputs.package }}/${{ steps.release.outputs.channel }} --cleanup-tag --yes || true

      # - name: Create updated tag and release
      #   uses: softprops/action-gh-release@v2
      #   if: ${{ startsWith(github.ref, 'refs/tags/') }}
      #   with:
      #     tag_name: ${{ steps.release.outputs.package }}/${{ steps.release.outputs.channel }}
      #     make_latest: ${{ steps.release.outputs.channel == 'latest' }}
      #     prerelease: ${{ steps.release.outputs.channel != 'latest' }}
      #     files: |
      #       # todo: handle latest and next releases
      #       ${{ steps.release.outputs.package_path }}/dist/*

  release-npm:
    runs-on: ubuntu-latest
    needs: build-binary
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/get-release-action
        id: release

      - uses: ./.github/actions/ts-env-action
        id: env

      - name: Bump package version
        shell: bash
        run: |
          pnpm --filter ${{ steps.release.outputs.package_name }} exec \
            npm --no-git-tag-version version ${{ steps.release.outputs.version }}

      - name: Build package code
        run: |
          pnpm run build
          pnpm --filter ${{ steps.release.outputs.package_name }} run \
            build

      - name: Remove package dependencies
        shell: bash
        run: |
          pnpm --filter ${{ steps.release.outputs.package_name }} exec \
            npm pkg delete dependencies devDependencies

      - name: Publish to npm
        run: |
          git diff
          pnpm --filter ${{ steps.release.outputs.package_name }} publish \
            --access public --provenance --no-git-checks --tag ${{ steps.release.outputs.channel }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  check-release:
    runs-on: ${{ matrix.runner }}
    needs:
      - release-docker
      - release-binary
      - release-npm
    strategy:
      matrix:
        runner:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/get-release-action
        id: release

      - name: Check binary on ${{ matrix.runner }}
        if: ${{ matrix.runner != 'windows-latest' }}
        shell: bash
        env:
          CONFIGU_HOME: ./configu
          CONFIGU_VERSION: ${{ steps.release.outputs.version }}
        run: |
          curl -fsSL https://raw.githubusercontent.com/configu/configu/refs/heads/${{ steps.release.outputs.branch }}/${{ steps.release.outputs.package_path }}/install.sh | sh
          ./configu/bin/configu -v

      - name: Check binary on ${{ matrix.runner }}
        if: ${{ matrix.runner == 'windows-latest' }}
        shell: pwsh
        env:
          CONFIGU_HOME: ./configu
          CONFIGU_VERSION: ${{ steps.release.outputs.version }}
        run: |
          irm https://raw.githubusercontent.com/configu/configu/refs/heads/${{ steps.release.outputs.branch }}/${{ steps.release.outputs.package_path }}/install.ps1 | iex
          ./configu/bin/configu -v

      - uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'

      - name: Check npm on ${{ matrix.runner }}
        run: |
          npm i -g ${{ steps.release.outputs.package_name }}@${{ steps.release.outputs.version }}
          configu -v

  post-release:
    runs-on: ubuntu-latest
    needs: check-release
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/deploy-end-action
        if: always()
        with:
          slack-webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
