name: "CD/@configu/cli"

on:
  push:
    tags:
      - cli/v*

jobs:
  cd-cli:
    name: "CD/@configu/cli"
    runs-on: ubuntu-latest
    env:
      PACKAGE_NAME: "@configu/cli"
      PACKAGE_PATH: "packages/cli"
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # required by aws, oclif
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # required by aws, oclif
      AWS_REGION: ${{ secrets.AWS_REGION }} # required by aws, oclif
      S3_BUCKET: "cli.configu.com"
      CLOUDFRONT_DISTRIBUTION: "E1I302A2MRSW0O"
      DOCKERHUB_REPOSITORY: "configu/cli"
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/deploy-start-action
        id: deployment
        with:
          package-name: ${{ env.PACKAGE_NAME }}
          slack-webhook: ${{ secrets.SLACK_WEBHOOK_URL }}

      - uses: ./.github/actions/ts-env-action

      - uses: ./.github/actions/ts-env-action
        with:
          dependencies-root: "ts"

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      # ---
      - name: Bump package version
        run: |
          cd ${{ env.CWD }}
          npm --no-git-tag-version version ${{ steps.deployment.outputs.release-version }} \
            --workspace=${{ env.PACKAGE_NAME }}

      - name: Build package code and produce tarballs
        run: |
          cd ${{ env.CWD }}
          npm run build:oclif \
            --workspace=${{ env.PACKAGE_NAME }}

      # https://github.com/oclif/oclif
      # https://github.com/oclif/oclif/blob/61cb7664ce38f1b7827ff652f063c3be7adeb1af/src/tarballs/config.ts
      - name: Publish tarballs to storage
        run: |
          cd ${{ env.CWD }}/${{ env.PACKAGE_PATH }}
          npx oclif upload tarballs
          if [ "${{ steps.deployment.outputs.release-channel }}" = "latest" ]; then channel="stable"; else channel="${{ steps.deployment.outputs.release-channel }}"; fi
          npx oclif promote \
            --channel $channel \
            --version ${{ steps.deployment.outputs.release-version }} \
            --sha ${{ steps.deployment.outputs.release-sha }} \
            --indexes

      - name: Copy installation scripts to storage
        run: |
          cd ${{ env.CWD }}/${{ env.PACKAGE_PATH }}
          aws s3 cp ./scripts s3://${{ env.S3_BUCKET }} --recursive

      - name: Invalidate storage CDN
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION }} --paths "/*"

      - name: Upload artifacts to release
        uses: softprops/action-gh-release@v1
        if: ${{startsWith(github.ref, 'refs/tags/') }}
        with:
          files: |
            ${{ env.CWD }}/${{ env.PACKAGE_PATH }}/dist/*

      - uses: docker/setup-qemu-action@v3

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build docker image and push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.CWD }}/${{ env.PACKAGE_PATH }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ env.DOCKERHUB_REPOSITORY }}:${{ steps.deployment.outputs.release-version }},${{ env.DOCKERHUB_REPOSITORY }}:${{ steps.deployment.outputs.release-channel }}
          push: true

      - name: Publish manifest
        if: ${{ steps.deployment.outputs.release-channel == 'latest' }}
        run: |
          cd ${{ env.CWD }}/${{ env.PACKAGE_PATH }}
          aws s3 cp ./oclif.manifest.json s3://${{ env.S3_BUCKET }}/${{ env.S3_FOLDER }}/manifest.json
          aws s3 cp ./manifest.md s3://${{ env.S3_BUCKET }}/${{ env.S3_FOLDER }}/manifest.md
          aws cloudfront create-invalidation --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION }} --paths "/${{ env.S3_FOLDER }}*"
        env:
          S3_BUCKET: "oss.configu.com"
          S3_FOLDER: "cli"
          CLOUDFRONT_DISTRIBUTION: "E7C5AL5O299SC"
      # ---
      - uses: ./.github/actions/deploy-end-action
        if: always()
        with:
          package-name: ${{ env.PACKAGE_NAME }}
          package-version: ${{ steps.deployment.outputs.release-version }}
          slack-webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
